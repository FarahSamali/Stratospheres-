<?php

namespace App\Controller;

use App\Entity\Evenement;
use App\Entity\Urlizer;
use App\Form\EvenementType;
use App\Repository\EvenementRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class EvenementController extends AbstractController
{
    #[Route('/evenement', name: 'app_evenement')]
    public function index(): Response
    {
        return $this->render('Admin/form.html.twig', [
            'controller_name' => 'EvenementController',
        ]);
    }

    #[Route('/addevent', name: 'add_event')]
    public function addevent(Request  $request,ManagerRegistry $doctrine)
    {
        $event= new Evenement();
        $form= $this->createForm(EvenementType::class,$event);
        $form->handleRequest($request) ;
        if($form->isSubmitted()){
           /* $file=$event->getImage();
            $filename = md5(uniqid()) . '.' . $file->guessExtension();

            $file->move(
                $this->getParameter('brochures_directory'),
                $filename);

            $event->setImage($filename);*/
            $em=$doctrine->getManager();
            $em->persist($event);
            $em->flush();
            return  $this->redirectToRoute("add_event");
        }
        return $this->renderForm("evenement/add.html.twig",array("FormEvent"=>$form));

    }
   /* private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }*/

    #[Route('/listEvent', name: 'listevent')]
    public function listEvent(EvenementRepository $repository)
    {
        $event= $repository->findAll();
        return $this->render("evenement/list.html.twig",array("tabEvent"=>$event));
    }
    #[Route('/removeEvent/{id}', name: 'remove_Event')]
    public function remove(ManagerRegistry $doctrine,$id,EvenementRepository $repository)
    {
        $event= $repository->find($id);
        $em= $doctrine->getManager();
        $em->remove($event);
        $em->flush();
        return $this->redirectToRoute("listevent");
    }
    #[Route('/updateEvent/{id}', name: 'update_Event')]
    public function updateEventForm($id,EvenementType  $repository,Request  $request,ManagerRegistry $doctrine)
    {
        $event=$this->getDoctrine()->getRepository(Evenement::class)->find($id);
        $form= $this->createForm(EvenementType::class,$event);
        $form->handleRequest($request) ;
        if($form->isSubmitted()){
            $em= $doctrine->getManager();
            $em->flush();
            return  $this->redirectToRoute("listevent");
        }
        return $this->renderForm("evenement/update.html.twig",array("FormEvent"=>$form));
    }


}
